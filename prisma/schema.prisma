model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  name          String
  country       String
  phone         String
  wallet        Wallet?
  investments   Investment[]
  transactions  Transaction[]   // âœ… add this for the relation
  createdAt     DateTime      @default(now())
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model InvestmentPlan {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  minAmount   Float
  roi         Float
  duration    Int
  investments Investment[]
  createdAt   DateTime      @default(now())
}

model Investment {
  id        String          @id @default(uuid())
  amount    Float
  status    String          @default("active")
  startDate DateTime        @default(now())
  endDate   DateTime
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  planId    String
  plan      InvestmentPlan  @relation(fields: [planId], references: [id])
}

model Transaction {
  id        String   @id @default(uuid())
  type      String   // "deposit" or "withdraw"
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])  // âœ… correct relation
}
model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String
  country     String
  phone       String
  wallet      Wallet?
  investments Investment[]
  transactions Transaction[]   // ðŸ‘ˆ also add relation back
  isAdmin     Boolean       @default(false) // ðŸ‘ˆ new field
  createdAt   DateTime      @default(now())
}
